@page "/"

@using SalesOrder.Shared
@using SalesOrder.Client.Services
@using SalesOrder.Client.Components.Pages.SoOrderComponent
@inject NavigationManager NavigationManager
@inject ISalesOrderService SalesOrderService
@inject IExcelService ExcelService
@inject ILogger<SoOrder> Logger
@inject IJSRuntime JsRuntime

<PageTitle>Sales Order</PageTitle>

<div class="container-fluid">
    <div class="header">
        <h2>SALES ORDER</h2>
    </div>

    <SalesOrderSearch OnSearch="HandleSearch" />

    <div class="action-buttons">
        <button class="btn btn-add" @onclick="AddNewOrder">Add New Data</button>
        <button class="btn btn-export" @onclick="ExportToExcel">
            <i class="fas fa-file-excel"></i>
            Export To Excel
        </button>
        <button class="btn btn-print ms-auto" @onclick="Print">
            <i class="fas fa-print"></i>
            Print
        </button>
    </div>

    <SalesOrderTable 
        Loading="@loading"
        Orders="@Orders"
        CurrentPage="@CurrentPage"
        TotalPages="@TotalPages"
        StartRecord="@StartRecord"
        EndRecord="@EndRecord"
        TotalRecords="@TotalRecords"
        OnEdit="EditOrder"
        OnDelete="DeleteOrder"
        OnPageChange="GoToPage"
        OnPreviousPage="PreviousPage"
        OnNextPage="NextPage" />
</div>

@code {
    private List<SoOrder> Orders = new();
    private bool loading = true;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalRecords;
    private int TotalPages => (int)Math.Ceiling(TotalRecords / (double)PageSize);
    private int StartRecord => (CurrentPage - 1) * PageSize + 1;
    private int EndRecord => Math.Min(CurrentPage * PageSize, TotalRecords);
    private SalesOrderSearch.SearchModel? currentSearch;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;
            var result = await SalesOrderService.GetOrdersAsync(
                currentSearch?.Keywords,
                currentSearch?.OrderDate,
                CurrentPage,
                PageSize
            );

            Orders = result.Orders;
            TotalRecords = result.TotalRecords ?? 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading sales orders");
            // TODO: Show error message to user
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch(SalesOrderSearch.SearchModel searchModel)
    {
        CurrentPage = 1;
        currentSearch = searchModel;
        await LoadData();
    }

    private void AddNewOrder() => NavigationManager.NavigateTo("/create");
    
    private void EditOrder(long salesOrderId) => NavigationManager.NavigateTo($"/edit/{salesOrderId}");

    private async Task DeleteOrder(long salesOrderId)
    {
        try
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order?");
            if (confirmed)
            {
                await SalesOrderService.DeleteOrderAsync(salesOrderId);
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting sales order");
            // TODO: Show error message to user
        }
    }

    private async Task ExportToExcel()
    {
        var excelBytes = await ExcelService.GenerateExcelWorkbook();
        await JsRuntime.InvokeVoidAsync("saveAsFile", $"test_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }

    private void Print()
    {
        JsRuntime.InvokeVoidAsync("printPage");
    }

    private async Task PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadData();
        }
    }

    private async Task GoToPage(int page)
    {
        CurrentPage = page;
        await LoadData();
    }
}